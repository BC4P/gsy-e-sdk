[tox]
mintoxversion = 2.3
envlist = check_readme, covclean, py38, coverage, integrationtests

[testenv]
passenv = LANG TERM LANGUAGE LC_ALL LD_LIBRARY_PATH
deps =
	pip-tools
	coverage
commands =
	pip-sync requirements/base.txt
	pip install -e .

[testenv:covclean]
basepython = python3.8
skip_install = true
deps = coverage
commands = coverage erase

[testenv:coverage]
basepython = python3.8
skip_install = true
deps = coverage
commands =
	coverage combine
	coverage report

[flake8]
max-line-length = 99
exclude = .tox,.cache,.pytest_cache

[testenv:integrationtests]
basepython = python3.8
deps =
	-rrequirements/dev.txt
setenv =
    API_CLIENT_RUN_ON_REDIS = true
whitelist_externals =
	git
	bash
commands_pre =
	pip install -e .
    git clone --branch {env:BRANCH:master} git@github.com:gridsingularity/gsy-backend-integration-tests.git {envtmpdir}/gsy-backend-integration-tests
    bash -c 'cp -r {envtmpdir}/gsy-backend-integration-tests/gsy_e_sdk_tests/integration_tests/ ./integration_tests/'
commands =
	bash -c 'for f in ./integration_tests/*.feature; do behave "$f" || exit 1; done'
commands_post =
    bash -c '[ -z "{env:INTEGRATION_TESTS_REPO_URL:}" ] && rm -rf ./integration_tests/ || :'

[testenv:unittests]
basepython = python3.8
deps =
	-rrequirements/dev.txt
commands =
    pip install -e .
	py.test unit_tests/

[testenv:check_readme]
skip_install = true
deps = readme_renderer
commands = python setup.py check --restructuredtext --strict

[testenv:ci]
basepython = python3.8
passenv = LANG TERM LANGUAGE LC_ALL LD_LIBRARY_PATH BRANCH
setenv =
	API_CLIENT_RUN_ON_REDIS = true
	INT_TESTS_REPO_SSH_URL = git@github.com:gridsingularity/gsy-backend-integration-tests.git
deps =
	pip-tools
	coverage
whitelist_externals =
	git
	bash
commands_pre =
	python -c "import fcntl; fcntl.fcntl(1, fcntl.F_SETFL, 0)"
	pip install -e .
	pip install -r requirements/dev.txt
    git clone --branch {env:BRANCH:master} {env:INTEGRATION_TESTS_REPO_URL:{env:INT_TESTS_REPO_SSH_URL:}} {envtmpdir}/gsy-backend-integration-tests
    bash -c 'cp -r {envtmpdir}/gsy-backend-integration-tests/gsy_e_sdk_tests/integration_tests/ ./integration_tests/'
commands =
	py.test unit_tests
	bash -c 'for f in ./integration_tests/*.feature; do behave "$f" || exit 1; done'
commands_post =
    bash -c '[ -z "{env:INTEGRATION_TESTS_REPO_URL:}" ] && rm -rf ./integration_tests/ || :'
